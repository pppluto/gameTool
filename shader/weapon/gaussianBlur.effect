// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: blur-fs:frag
      depthStencilState: &deps
        depthTest: false
        depthWrite: false
      blendState: &blends
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;

    color = a_color;

    return pos;
  }
}%

CCProgram blur-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>
  #define iResolution cc_screenSize

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  float grayColor(vec4:o) {
    return 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
  }
  vec3 RGBConvertToHSV(vec3 rgb) {
    float R = rgb.x, G = rgb.y, B = rgb.z;
    vec3 hsv;
    float max1 = max(R,max(G,B));
    float min1 = min(R,min(G,B));
    if (R == max1) {
      hsv.x = (G-B)/(max1-min1);
    }
    if (G == max1) {
      hsv.x = 2.0 + (B-R)/(max1-min1);
    }
    if (B == max1) {
      hsv.x = 4.0 + (R-G)/(max1-min1);
    }
    hsv.x = hsv.x * 60.0;   
    if (hsv.x < 0.0) hsv.x = hsv.x + 360.0;
    hsv.z = max1;
    hsv.y = (max1 - min1) / max1;
    return hsv;
  }
  vec4 getAvaliableColor(vec2 texcoord){
    vec4 color = CCSampleWithAlphaSeparated(cc_spriteTexture, texcoord);
    vec3 hsv = RGBConvertToHSV(color.rgb);
    if(hsv.z < .9) {
      color = vec4(0.);
    }
    return color;
  }
  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #endif

    //gaussion blur
    vec4 sum = vec4(0);
    float blurSize = 1./256.;
    float blurSizeY = blurSize * iResolution.x/iResolution.y;
    float intensity = 0.5 + sin(cc_time.x) /2.;
    vec2 texcoord = uv0;
    int j;
    int i;
    
    sum += getAvaliableColor(vec2(texcoord.x - 4.0*blurSize, texcoord.y)) * 0.05;
    sum += getAvaliableColor(vec2(texcoord.x - 3.0*blurSize, texcoord.y)) * 0.09;
    sum += getAvaliableColor(vec2(texcoord.x - 2.0*blurSize, texcoord.y)) * 0.12;
    sum += getAvaliableColor(vec2(texcoord.x - blurSize, texcoord.y)) * 0.15;
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y)) * 0.16;
    sum += getAvaliableColor(vec2(texcoord.x + blurSize, texcoord.y)) * 0.15;
    sum += getAvaliableColor(vec2(texcoord.x + 2.0*blurSize, texcoord.y)) * 0.12;
    sum += getAvaliableColor(vec2(texcoord.x + 3.0*blurSize, texcoord.y)) * 0.09;
    sum += getAvaliableColor(vec2(texcoord.x + 4.0*blurSize, texcoord.y)) * 0.05;
    
    // blur in y (vertical)
    // take nine samples, with the distance blurSize between them
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y - 4.0*blurSizeY)) * 0.05;
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y - 3.0*blurSizeY)) * 0.09;
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y - 2.0*blurSizeY)) * 0.12;
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y - blurSizeY)) * 0.15;
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y)) * 0.16;
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y + blurSizeY)) * 0.15;
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y + 2.0*blurSizeY)) * 0.12;
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y + 3.0*blurSizeY)) * 0.09;
    sum += getAvaliableColor(vec2(texcoord.x, texcoord.y + 4.0*blurSizeY)) * 0.05;


    sum *= intensity;
    // if(length(o.rbg) < 0.1) {
    //   sum = c
    // }
    o += sum;
    o *= color;
    ALPHA_TEST(o);

    return o;
  }
}%
