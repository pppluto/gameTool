// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        blurRadius:     { value: 0.5 }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, editor: { visible: false } } # backward compability
      blendState: &blends
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input-standard>
  #include <cc-fog>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif
  out float factor_fog;
  out vec3 v_view_normal;
  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld,matWorldIT;
    CCGetWorldMatrixFull(matWorld,matWorldIT);

    vec4 normal = vec4(In.normal,0.0);
    vec3 v_normal = normalize((matWorldIT * normal).xyz);
    v_view_normal = normalize(((cc_matView * matWorldIT) * normal).xyz);
    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif
    factor_fog = CC_TRANSFER_FOG(matWorld * In.position);
    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <output>
  #include <cc-fog>

  #if USE_ALPHA_TEST
    #pragma define ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
    float blurRadius;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif
  in float factor_fog;
  in vec3 v_view_normal;
  vec4 frag () {
    vec4 o = mainColor;
    o.rgb *= colorScaleAndCutoff.xyz;

    #if USE_VERTEX_COLOR
      o *= v_color;
    #endif

    #if USE_TEXTURE
      o = texture(mainTexture, v_uv);
    #endif

    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif
    float fRim = 1. - dot(normalize(v_view_normal),vec3(0,0,1.0));
    fRim = max(fRim - blurRadius,0.);
    fRim *= 2.;
    o.rgb = mix(o.rgb,mainColor.rgb,fRim);
    // o = vec4(mainColor.rgb,fRim);
    return CCFragOutput(o);
  }
}%