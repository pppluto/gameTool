// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, editor: { visible: false } } # backward compability
      blendState: &blends
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
    - switch: USE_OUTLINE_PASS
      vert: my-vs:vert
      frag: my-fs:frag
      rasterizerState:
        cullMode: back
      properties:
        lineWidth:     { value: 10, target: outlineParams.x }
        depthBias:     { value: 0,  target: outlineParams.y }
        baseColor:     { editor: { type: color } }
        baseColorMap:  { value: grey }
      blendState: *blends
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <input>
  #include <cc-global>
  #include <cc-local-batch>
  #include <input>
  #include <cc-fog-vs>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif
  out float factor_fog;
  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif
    factor_fog = CC_TRANSFER_FOG(matWorld * position);
    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <output>
  #include <cc-fog-fs>

  #if USE_ALPHA_TEST
    #pragma define ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif
  in float factor_fog;
  vec4 frag () {
    vec4 o = mainColor;
    o.rgb *= colorScaleAndCutoff.xyz;

    #if USE_VERTEX_COLOR
      o *= v_color;
    #endif

    #if USE_TEXTURE
      o *= texture(mainTexture, v_uv);
    #endif

    #if USE_ALPHA_TEST
      if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
    #endif
    o = CC_APPLY_FOG_BASE(o, factor_fog);
    return CCFragOutput(o);
  }
}%


CCProgram my-vs %{
  precision highp float;
  #include <input-standard>
  #include <cc-global>
  #include <cc-local-batch>

  out vec2 v_uv;
  out vec3 v_view_normal;
  uniform OutlineVert {
    vec4 outlineParams; // x: line width, y: depth hack
  };

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld,matWorldIT;
    CCGetWorldMatrixFull(matWorld,matWorldIT);

    float width = outlineParams.x * 0.001;
    vec4 normal = vec4(In.normal,0.0);
    vec3 v_normal = normalize((matWorldIT * normal).xyz);
    v_view_normal = normalize(((cc_matView * matWorldIT) * normal).xyz);
    // v_view_normal = normalize(((cc_matView * matWorld) * normal).xyz);    
    #if USE_POSITION_SCALING
      vec3 dir = normalize(In.position.xyz);
      float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;
      In.position.xyz += flip * dir * width * 2.0;
      vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;
    #else
      //enlarge
      // In.position.xyz += normalize(In.normal) * width;
      vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;
    #endif

    pos.z -= outlineParams.y * 0.002;

    v_uv = a_texCoord;

    return pos;
  }
}%

CCProgram my-fs %{
  precision highp float;
  #include <cc-global>
  #include <output>

  in vec2 v_uv;
  in vec3 v_view_normal;

  uniform OutlineFrag {
    vec4 baseColor;
  };

  #if USE_BASE_COLOR_MAP
    uniform sampler2D baseColorMap;
  #endif

  vec4 frag () {
    vec4 color = baseColor * cc_mainLitColor;
    #if USE_BASE_COLOR_MAP
      vec4 texColor = texture(baseColorMap, v_uv);
      texColor.rgb = SRGBToLinear(texColor.rgb);
      color *= texColor;
    #endif
    float fRim = 1. - dot(normalize(v_view_normal),vec3(0,0,1.0));
    fRim = smoothstep(0.3,1.,fRim);
    // color = vec4(102./255.,204./255.,1.,1.);
    return CCFragOutput(vec4(color.rgb,fRim));
  }
}%